# Nginx location configuration for Sequential Thinking MCP Server
# Add this to your existing nginx server block for https://mcp.yoda.digital

# Upstream definition for the MCP server container
upstream mcp-sequential-thinking {
    server localhost:3001 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Main location block for the Sequential Thinking MCP Server
location /sequential-thinking {
    # Remove the location prefix before forwarding to the container
    rewrite ^/sequential-thinking/?(.*)$ /$1 break;
    
    # Proxy configuration
    proxy_pass http://mcp-sequential-thinking;
    proxy_http_version 1.1;
    
    # Host and connection headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    
    # WebSocket and SSE support (required for MCP Streamable HTTP)
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    
    # MCP-specific headers
    proxy_set_header Mcp-Session-Id $http_mcp_session_id;
    proxy_set_header MCP-Protocol-Version $http_mcp_protocol_version;
    
    # Timeout configuration for long-running MCP operations
    proxy_connect_timeout 60s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    
    # Buffer configuration for streaming responses
    proxy_buffering off;
    proxy_cache off;
    proxy_request_buffering off;
    
    # Enable persistent connections
    proxy_set_header Connection "";
    
    # Security headers
    proxy_hide_header X-Powered-By;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    
    # CORS headers for browser clients
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Content-Type, Mcp-Session-Id, MCP-Protocol-Version, Authorization" always;
    add_header Access-Control-Expose-Headers "Mcp-Session-Id" always;
    add_header Access-Control-Max-Age 86400 always;
    
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Mcp-Session-Id, MCP-Protocol-Version, Authorization";
        add_header Access-Control-Expose-Headers "Mcp-Session-Id";
        add_header Access-Control-Max-Age 86400;
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
    }
    
    # Rate limiting (adjust as needed)
    limit_req zone=api burst=20 nodelay;
    limit_req_status 429;
    
    # Client body size limit
    client_max_body_size 10m;
    
    # Logging for debugging (optional)
    access_log /var/log/nginx/mcp-sequential-thinking.access.log;
    error_log /var/log/nginx/mcp-sequential-thinking.error.log;
}

# Health check endpoint (bypass authentication if any)
location /sequential-thinking/health {
    proxy_pass http://mcp-sequential-thinking/health;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # Quick health check timeouts
    proxy_connect_timeout 5s;
    proxy_send_timeout 5s;
    proxy_read_timeout 5s;
    
    # Disable caching for health checks
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header Pragma "no-cache";
    add_header Expires "0";
    
    # Allow access without rate limiting
    limit_req off;
    
    # Health check specific logging (optional)
    access_log off;
}

# =============================================================================
# Additional nginx configuration needed in the main server block or http block
# =============================================================================

# Add these directives to your main nginx configuration:

# Rate limiting zone (add to http block)
# limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

# WebSocket upgrade headers (add to http block)
# map $http_upgrade $connection_upgrade {
#     default upgrade;
#     '' close;
# }

# =============================================================================
# Example complete server block configuration:
# =============================================================================

# server {
#     listen 443 ssl http2;
#     server_name mcp.yoda.digital;
#     
#     # SSL configuration
#     ssl_certificate /etc/letsencrypt/live/mcp.yoda.digital/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/mcp.yoda.digital/privkey.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     # Security headers
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     add_header X-Content-Type-Options nosniff;
#     add_header X-Frame-Options DENY;
#     add_header X-XSS-Protection "1; mode=block";
#     add_header Referrer-Policy "strict-origin-when-cross-origin";
#     
#     # Root location (optional)
#     location / {
#         return 200 "MCP Services";
#         add_header Content-Type text/plain;
#     }
#     
#     # Include the Sequential Thinking MCP Server configuration
#     include /path/to/nginx-location.conf;
#     
#     # Add other MCP servers here...
# }

# =============================================================================
# Testing the configuration:
# =============================================================================

# 1. Test nginx configuration:
#    sudo nginx -t
#
# 2. Reload nginx:
#    sudo systemctl reload nginx
#
# 3. Test the MCP server:
#    curl -X GET https://mcp.yoda.digital/sequential-thinking/health
#
# 4. Test WebSocket/SSE upgrade:
#    curl -H "Connection: Upgrade" -H "Upgrade: websocket" \
#         https://mcp.yoda.digital/sequential-thinking/mcp
#
# 5. Test MCP protocol:
#    curl -X POST https://mcp.yoda.digital/sequential-thinking/mcp \
#         -H "Content-Type: application/json" \
#         -H "MCP-Protocol-Version: 2025-06-18" \
#         -d '{"jsonrpc":"2.0","method":"initialize","id":1,"params":{"protocolVersion":"2025-06-18","capabilities":{},"clientInfo":{"name":"test","version":"1.0"}}}'